name: CI/CD

on:
  push:
    branches: [ "main", "CI-CD" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-endpoints:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13.2"

    - name: Create .env file
      run: |
        echo "DEBUG=true" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> .env
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
        
    
    # Cache pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Setup the project
    - name: Setup project
      run: |
        pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        python manage.py migrate

    # Create the schema file if it doesn't exist
    - name: Create schema file if not created
      run: |
        if [ ! -f "./schema.yaml" ]; then
          python manage.py spectacular --color --file schema.yaml
        else
          echo "Schema file exists."
        fi
    # Generate API key
    - name: Generate API key
      id: generate_key
      run: |
        python manage.py shell < tests/create_api_key.py

    - name: Run server and wait until done
      run: |
        python manage.py runserver localhost:8000 &
        MAX_RETRIES=5
        COUNT=0
        until curl -s http://localhost:8000/api/health/; do
          echo "Waiting for API..."
          sleep 5
          COUNT=$((COUNT + 1))
          if [ $COUNT -ge $MAX_RETRIES ]; then
            echo "API did not become ready in time. Exiting."
            docker logs test
            exit 1
          fi
        done

    # Run Schemathesis tests
    - name: Run Schemathesis tests
      uses: schemathesis/action@v1
      with:
        schema: "http://localhost:8000/api/schema/"
        base-url: "http://localhost:8000"
        args: '-H Authorization: Api-Key ${{ steps.generate_key.outputs.api_key }}' 
